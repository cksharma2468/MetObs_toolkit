name: Test pushed version

on: [push]

jobs:
#---- Run tests -----#
   run-tests:
     name: run test scripts
     runs-on: ${{ matrix.os }}
     strategy:
       # You can use PyPy versions in python-version.
       # For example, pypy-2.7 and pypy-3.8
       matrix:
         python-version: ["3.9", "3.10"]
         # os: [ubuntu-latest, windows-latest]
         os: [ubuntu-latest]
         node-version: [12.x]

     steps:
       - uses: actions/checkout@v3
       - name: Set up Python ${{ matrix.python-version }}
         uses: actions/setup-python@v4
         with:
           python-version: ${{ matrix.python-version }}
           #cache: 'poetry'
       # You can test your matrix by printing the current Python version
       - name: Display Python version
         run: python -c "import sys; print(sys.version)"
       - name: Install poetry
         run: |
             pip install poetry

       - name: Install dependencies and build
         run: |
             poetry update
             poetry install
             poetry build
       - name: Run tests
         run: |
             poetry run python tests/push_test/gap_and_fill_test.py
             poetry run python tests/push_test/IO_test.py
             poetry run python tests/push_test/qc_test.py
             poetry run python tests/push_test/breaking_test.py
             #poetry run python tests/push_test/gui_launch_test.py
             poetry run python tests/push_test/analysis_test.py

#--- Package os installation ---
   os_install_testing:
      name: test package installation on multiple os
      if: (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master')
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: true
        matrix:
          os: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
          python-version: ["3.9", "3.10"]
      defaults:
        run:
          shell: bash
      steps:
        #---
        #       check-out repo and set-up python
        #----
        - name: Check out repository
          uses: actions/checkout@v3
        - name: Set up python ${{ matrix.python-version }}
          id: setup-python
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
        #--
        #  -----  install & configure poetry  -----
        #--
        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            version: 1.3.2
            virtualenvs-create: true
            virtualenvs-in-project: true
        - name: Load cached venv
          id: cached-pip-wheels
          uses: actions/cache@v3
          with:
            path: ~/.cache
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        - name: Update lock
          run: poetry update
        - name: Install dependencies
          run: poetry install --no-interaction --no-root
        - name: Install library
          run: poetry install --no-interaction
        - name: Run tests
          run: |
            source $VENV
            python tests/push_test/import_test.py

#---- Version Control -----#
   versiontest:
     name: check if version is valid
     needs: run-tests
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
       - name: navigate
         run: |
           pwd
           ls
       - name: get version
         id: 'version_info'
         run: |
           CURRENT_VERSION="$(grep -oP '__version__ = "\K\d+\.\d+\.\d+' metobs_toolkit/__init__.py)"
           echo "current version (init) = ${CURRENT_VERSION}"
           echo "::set-output name=current_version::$CURRENT_VERSION"
           PYPROJECT_VERSION="$(grep -oP 'version = "\K\d+\.\d+\.\d+' pyproject.toml)"
           echo "current version (pyproject) = ${PYPROJECT_VERSION}"
           echo "::set-output name=pyproject_version::$PYPROJECT_VERSION"
       - name: version-is-correct
         if: ${{ steps.version_info.outputs.current_version != steps.version_info.outputs.pyproject_version }}
         run: |
           echo "version tags are not aligned!"
           exit 1

#---- Documentation build -----#
   doctests:
     name: documentation-test
     #needs: versiontest
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
       - name: Set up Python39
         uses: actions/setup-python@v4
         with:
           python-version: '3.9'
           #cache: 'poetry'
       # You can test your matrix by printing the current Python version
       - name: Display Python version
         run: python -c "import sys; print(sys.version)"
       - name: install pandoc (system wide)
         run: |
             sudo apt-get -y install pandoc
       - name: Install poetry
         run: |
             pip install poetry
       - name: Install dependencies and build
         run: |
             poetry update
             poetry install --all-extras
             poetry build
       - name: Build documentation
         run: |
             poetry show
             poetry run sphinx-build -a -E docs _build

#---- Deploy documentation -----#
   deploy_doc:
      name: Deploy main documentation
      needs: [doctests,run-tests,versiontest,os_install_testing]
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/master'
      steps:
         - uses: actions/checkout@v3
         - name: deploy artifact
           uses: peaceiris/actions-gh-pages@v3
           with:
            publish_branch: gh-pages
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: _build/
            force_orphan: true

   deploy_doc_dev:
      name: Deploy dev documentation
      needs: [doctests]
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/dev'
      steps:
         - uses: actions/checkout@v3
         - name: deploy artifact
           uses: peaceiris/actions-gh-pages@v3
           with:
            publish_branch: gh-pages-dev
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: _build/
            force_orphan: true







